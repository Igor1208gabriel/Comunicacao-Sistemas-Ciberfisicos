name: Build and Analyze ROS2
on: [push, pull_request]
jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # üî• CACHE DOCKER CORRETO (FUNCIONA SEMPRE!)
      - name: Cache Docker Image
        uses: actions/cache@v4
        id: docker-cache
        with:
          path: /tmp/docker-ros2-dev.tar
          key: docker-ros2-dev-${{ hashFiles('.devcontainer/Dockerfile', '.devcontainer/**') }}
          restore-keys: docker-ros2-dev-
      
      - name: Build DevContainer image
        run: |
          if [ "${{ steps.docker-cache.outputs.cache-hit }}" = "true" ]; then
            echo "üîÑ Restaurando imagem do cache... (30s)"
            docker load < /tmp/docker-ros2-dev.tar
          else
            echo "üèóÔ∏è Construindo imagem do zero... (5min)"
            docker build -t ros2-dev -f .devcontainer/Dockerfile .devcontainer
            docker save ros2-dev | gzip > /tmp/docker-ros2-dev.tar.gz
          fi
      
      # üî• CACHE ROS2 (OPCIONAL - +50% mais r√°pido)
      - name: Cache ROS2 Workspace
        uses: actions/cache@v4
        with:
          path: |
            ROS2/workspace/install
            ROS2/workspace/build
          key: ${{ runner.os }}-ros2-${{ hashFiles('ROS2/workspace/src/**/package.xml') }}
          restore-keys: ${{ runner.os }}-ros2-
      
      # üî• BUILD COM LOGS VIS√çVEIS NA TELA!
      - name: Build ROS2 Workspace
        run: |
          docker run --rm \
          --privileged \
          --network=host \
          --user root \
          -v ${{ github.workspace }}:/project \
          -w /project/ROS2/workspace \
          ros2-dev \
          bash -c "
            source /opt/ros/humble/setup.bash
            
            echo ''
            echo 'üì¶=== ROSDEP INSTALLING DEPENDENCIES ==='
            echo ''
            rosdep install --from-paths src --ignore-src -r -y || { echo '‚ùå ROSDEP FAILED'; exit 1; }
            
            echo ''
            echo 'üèóÔ∏è === COLCON BUILDING PACKAGES ==='
            echo ''
            colcon build \
              --symlink-install \
              --event-handlers console_direct+ \
              --event-handlers console_cohesion+ \
              || { echo '‚ùå COLCON BUILD FAILED'; exit 1; }
            
            echo ''
            echo '‚úÖ BUILD COMPLETED!'
          "
      
      # üî• RESUMO NA TELA PRINCIPAL
      - name: Build Summary
        if: always()
        run: |
          if [ -f ROS2/workspace/install/setup.bash ]; then
            PKGS=$(find ROS2/workspace/build -name '*.so' | wc -l)
            echo "‚úÖ **SUCCESS** - ${PKGS} packages built!"
          else
            echo "‚ùå **FAILED** - See logs above!"
          fi
      
      - name: SonarQube Scan
        if: success()
        uses: SonarSource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602
        env:
          SONAR_HOST_URL: https://sonarcloud.io
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}