name: Build and Analyze ROS2
on: [push, pull_request]
jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # üî• CACHE DOCKER CORRETO (FUNCIONA SEMPRE!)
      - name: Cache Docker Image
        uses: actions/cache@v4
        id: docker-cache
        with:
          path: /tmp/docker-ros2-dev.tar
          key: docker-ros2-dev-${{ hashFiles('.devcontainer/Dockerfile', '.devcontainer/**') }}
          restore-keys: docker-ros2-dev-
      
      - name: Build DevContainer image
        run: |
          if [ "${{ steps.docker-cache.outputs.cache-hit }}" = "true" ]; then
            echo "üîÑ Restaurando imagem do cache... (30s)"
            docker load < /tmp/docker-ros2-dev.tar
          else
            echo "üèóÔ∏è Construindo imagem do zero... (5min)"
            docker build -t ros2-dev -f .devcontainer/Dockerfile .devcontainer
            docker save ros2-dev | gzip > /tmp/docker-ros2-dev.tar.gz
          fi
      
      # üî• CACHE ROS2 (OPCIONAL - +50% mais r√°pido)
      - name: Cache ROS2 Workspace
        uses: actions/cache@v4
        with:
          path: |
            ROS2/workspace/install
            ROS2/workspace/build
          key: ${{ runner.os }}-ros2-${{ hashFiles('ROS2/workspace/src/**/package.xml') }}
          restore-keys: ${{ runner.os }}-ros2-
      
      # üî• BUILD COM LOGS VIS√çVEIS NA TELA!
      - name: Build ROS2 Workspace
        run: |
          docker run --rm \
          --privileged \
          --network=host \
          --user root \
          -v ${{ github.workspace }}:/project \
          -w /project/ROS2/workspace \
          ros2-dev \
          bash -c "
            source /opt/ros/humble/setup.bash
            
            echo ''
            echo 'üì¶=== ROSDEP INSTALLING DEPENDENCIES ==='
            echo ''
            rosdep install --from-paths src --ignore-src -r -y || { echo '‚ùå ROSDEP FAILED'; exit 1; }
            
            echo ''
            echo 'üèóÔ∏è === COLCON BUILDING PACKAGES ==='
            echo ''
            colcon build \
              --symlink-install \
              --event-handlers console_direct+ \
              --event-handlers console_cohesion+ \
              || { echo '‚ùå COLCON BUILD FAILED'; exit 1; }
            
            echo ''
            echo '‚úÖ BUILD COMPLETED!'
          "
      
      # üî• RESUMO NA TELA PRINCIPAL
      - name: Build Summary
        if: always()
        run: |
          if [ -f ROS2/workspace/install/setup.bash ]; then
            PKGS=$(find ROS2/workspace/build -name '*.so' | wc -l)
            echo "‚úÖ **SUCCESS** - ${PKGS} packages built!"
          else
            echo "‚ùå **FAILED** - See logs above!"
          fi
      
      - name: SonarQube Scan
        if: success()
        uses: SonarSource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602
        env:
          SONAR_HOST_URL: https://sonarcloud.io
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Show SonarQube Results
        if: always()
        run: |
          echo ""
          echo "üîç=== SONARQUBE ANALYSIS RESULTS ==="
          echo ""
          
          # Pega resultados da API SonarCloud
          TASK_ID=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
            "https://sonarcloud.io/api/ce/task?name=${{ github.run_id }}-${{ github.run_attempt }}" | \
            jq -r '.task.id // empty')
          
          if [ -n "$TASK_ID" ]; then
            sleep 10  # Aguarda an√°lise terminar
            ANALYSIS_URL="https://sonarcloud.io/api/measures/component?component=${{ github.repository }}&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density"
            RESULTS=$(curl -s "$ANALYSIS_URL")
            
            BUGS=$(echo "$RESULTS" | jq -r '.component.measures[] | select(.metric=="bugs") | .value // "N/A"')
            VULNS=$(echo "$RESULTS" | jq -r '.component.measures[] | select(.metric=="vulnerabilities") | .value // "N/A"')
            SMELLS=$(echo "$RESULTS" | jq -r '.component.measures[] | select(.metric=="code_smells") | .value // "N/A"')
            COVERAGE=$(echo "$RESULTS" | jq -r '.component.measures[] | select(.metric=="coverage") | .value // "N/A"' | sed 's/\..*//')
            DUPS=$(echo "$RESULTS" | jq -r '.component.measures[] | select(.metric=="duplicated_lines_density") | .value // "N/A"' | sed 's/\..*//')
            
            echo "üêõ **BUGS:** ${BUGS}"
            echo "üîí **VULNERABILITIES:** ${VULNS}"
            echo "üí© **CODE SMELLS:** ${SMELLS}"
            echo "üü¢ **COVERAGE:** ${COVERAGE}%"
            echo "üìã **DUPLICATION:** ${DUPS}%"
            echo ""
            echo "üìä **FULL REPORT:** https://sonarcloud.io/dashboard?id=${{ github.repository }}"
            echo ""
            
            # üö® ALERTAS VISUAIS
            if [ "$BUGS" != "N/A" ] && [ "$BUGS" -gt 5 ]; then echo "üö® HIGH BUG COUNT!"; fi
            if [ "$COVERAGE" != "N/A" ] && [ "$COVERAGE" -lt 70 ]; then echo "üìâ LOW COVERAGE!"; fi
          else
            echo "‚è≥ Analysis still running... Check: https://sonarcloud.io/dashboard?id=${{ github.repository }}"
          fi
      
      # üî• STATUS FINAL
      - name: Final Status
        if: always()
        run: |
          echo "üéØ **WORKFLOW COMPLETE**"
          echo "   üìã Sonar: https://sonarcloud.io/dashboard?id=${{ github.repository }}"