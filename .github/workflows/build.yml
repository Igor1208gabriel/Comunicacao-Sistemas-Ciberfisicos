name: Build and Analyze ROS2
on: [push, pull_request]
jobs:
  build-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Cache Docker Image
        uses: actions/cache@v4
        id: docker-cache
        with:
          path: /tmp/docker-ros2-dev.tar
          key: docker-ros2-dev-${{ hashFiles('.devcontainer/Dockerfile', '.devcontainer/**') }}
          restore-keys: docker-ros2-dev-
      
      - name: Build DevContainer image
        run: |
          if [ "${{ steps.docker-cache.outputs.cache-hit }}" = "true" ]; then
            docker load < /tmp/docker-ros2-dev.tar
          else
            docker build -t ros2-dev -f .devcontainer/Dockerfile .devcontainer
            docker save ros2-dev | gzip > /tmp/docker-ros2-dev.tar.gz
          fi
      
      - name: Cache ROS2 Workspace
        uses: actions/cache@v4
        with:
          path: |
            ROS2/workspace/install
            ROS2/workspace/build
          key: ${{ runner.os }}-ros2-${{ hashFiles('ROS2/workspace/src/**/package.xml') }}
          restore-keys: ${{ runner.os }}-ros2-
      
      - name: Build ROS2 Workspace
        run: |
          docker run --rm \
          --privileged \
          --network=host \
          --user root \
          -v ${{ github.workspace }}:/project \
          -w /project/ROS2/workspace \
          ros2-dev \
          bash -c "
            source /opt/ros/humble/setup.bash
            rosdep install --from-paths src --ignore-src -r -y
            colcon build \
              --symlink-install \
              --event-handlers console_direct+ \
              --event-handlers console_cohesion+ \
          "

      - name: SonarQube Scan
        if: success()
        uses: SonarSource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602
        env:
          SONAR_HOST_URL: https://sonarcloud.io
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Show SonarQube Results
        if: always()
        run: |
          ANALYSIS_URL="https://sonarcloud.io/api/measures/component?component=Igor1208gabriel_Comunicacao-Sistemas-Ciberfisicos&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density"
          RESULTS=$(curl -s "$ANALYSIS_URL")

          BUGS=$(echo "$RESULTS" | jq -r '.component.measures[] | select(.metric=="bugs") | .value // "N/A"')
          VULNS=$(echo "$RESULTS" | jq -r '.component.measures[] | select(.metric=="vulnerabilities") | .value // "N/A"')
          SMELLS=$(echo "$RESULTS" | jq -r '.component.measures[] | select(.metric=="code_smells") | .value // "N/A"')
          COVERAGE=$(echo "$RESULTS" | jq -r '.component.measures[] | select(.metric=="coverage") | .value // "N/A"' | sed 's/\..*//')
          DUPS=$(echo "$RESULTS" | jq -r '.component.measures[] | select(.metric=="duplicated_lines_density") | .value // "N/A"' | sed 's/\..*//')

          # === MARKDOWN SUMMARY ===
          {
            echo "## 🧠 SonarQube Analysis Summary"
            echo ""
            echo "| Métrica | Valor |"
            echo "|----------|--------|"
            echo "| 🐛 **Bugs** | ${BUGS} |"
            echo "| 🔒 **Vulnerabilidades** | ${VULNS} |"
            echo "| 💩 **Code Smells** | ${SMELLS} |"
            echo "| 🧪 **Cobertura de Testes** | ${COVERAGE}% |"
            echo "| 📋 **Duplicação de Código** | ${DUPS}% |"
            echo "### 📊 [Ver relatório completo no SonarCloud](https://sonarcloud.io/dashboard?id=Igor1208gabriel_Comunicacao-Sistemas-Ciberfisicos)"
            if [ "$BUGS" != "N/A" ] && [ "$BUGS" -gt 5 ]; then
              echo "> 🚨 **Alerta:** número alto de bugs!"
            fi
            if [ "$COVERAGE" != "N/A" ] && [ "$COVERAGE" -lt 70 ]; then
              echo "> ⚠️ **Cobertura baixa:** recomenda-se acima de 70%."
            fi
          } >> $GITHUB_STEP_SUMMARY 